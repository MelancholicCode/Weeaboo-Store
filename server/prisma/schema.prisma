generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int            @id @default(autoincrement())
  avatar   String
  name     String
  surname  String
  email    String         @unique
  password String
  address  String
  Cart     Cart?
  Review   Review[]
  roles    RolesOnUsers[]
  Favorite Favorite[]
  Order    Order[]
}

model Cart {
  id       Int        @id @unique @default(autoincrement())
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int        @unique
  CartItem CartItem[]
}

model Category {
  id      Int       @id @unique @default(autoincrement())
  name    String
  slug    String    @unique
  Product Product[]
}

model Product {
  id          Int        @id @unique @default(autoincrement())
  title       String
  description String
  price       Int
  img         String
  slug        String     @unique
  category    Category   @relation(fields: [categoryId], references: [id])
  categoryId  Int
  CartItem    CartItem?
  Favorite    Favorite?
  OrderItem   OrderItem?
  Review      Review[]
}

model Order {
  id        Int         @id @unique @default(autoincrement())
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  OrderItem OrderItem[]
}

model OrderItem {
  id        Int     @id @unique @default(autoincrement())
  quantity  Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int     @unique
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  Review    Review?
}

model Favorite {
  id        Int     @id @unique @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int     @unique
}

model Review {
  id          Int       @id @unique @default(autoincrement())
  rate        Int
  comment     String
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  orderItemId Int       @unique
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int
}

model CartItem {
  id        Int     @id @unique @default(autoincrement())
  quantity  Int     @default(1)
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int     @unique
}

model Role {
  id    Int            @id @default(autoincrement())
  name  String         @unique
  users RolesOnUsers[]
}

model RolesOnUsers {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@id([userId, roleId])
}
